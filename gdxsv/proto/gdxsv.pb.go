// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: gdxsv/proto/gdxsv.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_None        MessageType = 0
	MessageType_HelloServer MessageType = 1
	MessageType_Ping        MessageType = 2
	MessageType_Pong        MessageType = 3
	MessageType_Battle      MessageType = 4
	MessageType_Fin         MessageType = 5
	MessageType_HelloLbs    MessageType = 10
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "None",
		1:  "HelloServer",
		2:  "Ping",
		3:  "Pong",
		4:  "Battle",
		5:  "Fin",
		10: "HelloLbs",
	}
	MessageType_value = map[string]int32{
		"None":        0,
		"HelloServer": 1,
		"Ping":        2,
		"Pong":        3,
		"Battle":      4,
		"Fin":         5,
		"HelloLbs":    10,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_gdxsv_proto_gdxsv_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_gdxsv_proto_gdxsv_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{0}
}

type P2PMatchingReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleCode  string   `protobuf:"bytes,1,opt,name=battle_code,json=battleCode,proto3" json:"battle_code,omitempty"`
	SessionId   int32    `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PlayerCount int32    `protobuf:"varint,3,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	PeerId      int32    `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	CloseReason string   `protobuf:"bytes,5,opt,name=close_reason,json=closeReason,proto3" json:"close_reason,omitempty"`
	FrameCount  int32    `protobuf:"varint,6,opt,name=frame_count,json=frameCount,proto3" json:"frame_count,omitempty"`
	Logs        []string `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *P2PMatchingReport) Reset() {
	*x = P2PMatchingReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PMatchingReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PMatchingReport) ProtoMessage() {}

func (x *P2PMatchingReport) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PMatchingReport.ProtoReflect.Descriptor instead.
func (*P2PMatchingReport) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{0}
}

func (x *P2PMatchingReport) GetBattleCode() string {
	if x != nil {
		return x.BattleCode
	}
	return ""
}

func (x *P2PMatchingReport) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *P2PMatchingReport) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *P2PMatchingReport) GetPeerId() int32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *P2PMatchingReport) GetCloseReason() string {
	if x != nil {
		return x.CloseReason
	}
	return ""
}

func (x *P2PMatchingReport) GetFrameCount() int32 {
	if x != nil {
		return x.FrameCount
	}
	return 0
}

func (x *P2PMatchingReport) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type P2PMatching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleCode   string           `protobuf:"bytes,1,opt,name=battle_code,json=battleCode,proto3" json:"battle_code,omitempty"`
	SessionId    int32            `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PlayerCount  int32            `protobuf:"varint,3,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	PeerId       int32            `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	TimeoutMinMs int32            `protobuf:"varint,5,opt,name=timeout_min_ms,json=timeoutMinMs,proto3" json:"timeout_min_ms,omitempty"`
	TimeoutMaxMs int32            `protobuf:"varint,6,opt,name=timeout_max_ms,json=timeoutMaxMs,proto3" json:"timeout_max_ms,omitempty"`
	RuleBin      []byte           `protobuf:"bytes,8,opt,name=rule_bin,json=ruleBin,proto3" json:"rule_bin,omitempty"`
	Users        []*BattleLogUser `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`
	Candidates   []*PlayerAddress `protobuf:"bytes,10,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (x *P2PMatching) Reset() {
	*x = P2PMatching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PMatching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PMatching) ProtoMessage() {}

func (x *P2PMatching) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PMatching.ProtoReflect.Descriptor instead.
func (*P2PMatching) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{1}
}

func (x *P2PMatching) GetBattleCode() string {
	if x != nil {
		return x.BattleCode
	}
	return ""
}

func (x *P2PMatching) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *P2PMatching) GetPlayerCount() int32 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *P2PMatching) GetPeerId() int32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *P2PMatching) GetTimeoutMinMs() int32 {
	if x != nil {
		return x.TimeoutMinMs
	}
	return 0
}

func (x *P2PMatching) GetTimeoutMaxMs() int32 {
	if x != nil {
		return x.TimeoutMaxMs
	}
	return 0
}

func (x *P2PMatching) GetRuleBin() []byte {
	if x != nil {
		return x.RuleBin
	}
	return nil
}

func (x *P2PMatching) GetUsers() []*BattleLogUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *P2PMatching) GetCandidates() []*PlayerAddress {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type PlayerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerId int32  `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Ip     string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port   int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Team   int32  `protobuf:"varint,5,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *PlayerAddress) Reset() {
	*x = PlayerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAddress) ProtoMessage() {}

func (x *PlayerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAddress.ProtoReflect.Descriptor instead.
func (*PlayerAddress) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerAddress) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PlayerAddress) GetPeerId() int32 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *PlayerAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlayerAddress) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PlayerAddress) GetTeam() int32 {
	if x != nil {
		return x.Team
	}
	return 0
}

type GamePatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameDisk  string           `protobuf:"bytes,1,opt,name=game_disk,json=gameDisk,proto3" json:"game_disk,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WriteOnce bool             `protobuf:"varint,4,opt,name=write_once,json=writeOnce,proto3" json:"write_once,omitempty"`
	Codes     []*GamePatchCode `protobuf:"bytes,10,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *GamePatch) Reset() {
	*x = GamePatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePatch) ProtoMessage() {}

func (x *GamePatch) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePatch.ProtoReflect.Descriptor instead.
func (*GamePatch) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{3}
}

func (x *GamePatch) GetGameDisk() string {
	if x != nil {
		return x.GameDisk
	}
	return ""
}

func (x *GamePatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GamePatch) GetWriteOnce() bool {
	if x != nil {
		return x.WriteOnce
	}
	return false
}

func (x *GamePatch) GetCodes() []*GamePatchCode {
	if x != nil {
		return x.Codes
	}
	return nil
}

type GamePatchCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int32  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Address  uint32 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Original uint32 `protobuf:"varint,3,opt,name=original,proto3" json:"original,omitempty"`
	Changed  uint32 `protobuf:"varint,4,opt,name=changed,proto3" json:"changed,omitempty"`
}

func (x *GamePatchCode) Reset() {
	*x = GamePatchCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePatchCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePatchCode) ProtoMessage() {}

func (x *GamePatchCode) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePatchCode.ProtoReflect.Descriptor instead.
func (*GamePatchCode) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{4}
}

func (x *GamePatchCode) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GamePatchCode) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *GamePatchCode) GetOriginal() uint32 {
	if x != nil {
		return x.Original
	}
	return 0
}

func (x *GamePatchCode) GetChanged() uint32 {
	if x != nil {
		return x.Changed
	}
	return 0
}

type GamePatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patches []*GamePatch `protobuf:"bytes,1,rep,name=patches,proto3" json:"patches,omitempty"`
}

func (x *GamePatchList) Reset() {
	*x = GamePatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePatchList) ProtoMessage() {}

func (x *GamePatchList) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePatchList.ProtoReflect.Descriptor instead.
func (*GamePatchList) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{5}
}

func (x *GamePatchList) GetPatches() []*GamePatch {
	if x != nil {
		return x.Patches
	}
	return nil
}

type BattleLogUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	PilotName    string `protobuf:"bytes,3,opt,name=pilot_name,json=pilotName,proto3" json:"pilot_name,omitempty"`
	GameParam    []byte `protobuf:"bytes,4,opt,name=game_param,json=gameParam,proto3" json:"game_param,omitempty"`
	BattleCount  int32  `protobuf:"varint,5,opt,name=battle_count,json=battleCount,proto3" json:"battle_count,omitempty"`
	WinCount     int32  `protobuf:"varint,6,opt,name=win_count,json=winCount,proto3" json:"win_count,omitempty"`
	LoseCount    int32  `protobuf:"varint,7,opt,name=lose_count,json=loseCount,proto3" json:"lose_count,omitempty"`
	Grade        int32  `protobuf:"varint,8,opt,name=grade,proto3" json:"grade,omitempty"`
	Team         int32  `protobuf:"varint,9,opt,name=team,proto3" json:"team,omitempty"`
	Platform     string `protobuf:"bytes,10,opt,name=platform,proto3" json:"platform,omitempty"`
	UserNameSjis []byte `protobuf:"bytes,11,opt,name=user_name_sjis,json=userNameSjis,proto3" json:"user_name_sjis,omitempty"`
	Pos          int32  `protobuf:"varint,12,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *BattleLogUser) Reset() {
	*x = BattleLogUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleLogUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleLogUser) ProtoMessage() {}

func (x *BattleLogUser) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleLogUser.ProtoReflect.Descriptor instead.
func (*BattleLogUser) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{6}
}

func (x *BattleLogUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BattleLogUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BattleLogUser) GetPilotName() string {
	if x != nil {
		return x.PilotName
	}
	return ""
}

func (x *BattleLogUser) GetGameParam() []byte {
	if x != nil {
		return x.GameParam
	}
	return nil
}

func (x *BattleLogUser) GetBattleCount() int32 {
	if x != nil {
		return x.BattleCount
	}
	return 0
}

func (x *BattleLogUser) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *BattleLogUser) GetLoseCount() int32 {
	if x != nil {
		return x.LoseCount
	}
	return 0
}

func (x *BattleLogUser) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *BattleLogUser) GetTeam() int32 {
	if x != nil {
		return x.Team
	}
	return 0
}

func (x *BattleLogUser) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *BattleLogUser) GetUserNameSjis() []byte {
	if x != nil {
		return x.UserNameSjis
	}
	return nil
}

func (x *BattleLogUser) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type BattleLogFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameDisk               string           `protobuf:"bytes,5,opt,name=game_disk,json=gameDisk,proto3" json:"game_disk,omitempty"`
	GdxsvVersionDeprecated string           `protobuf:"bytes,2,opt,name=gdxsv_version_deprecated,json=gdxsvVersionDeprecated,proto3" json:"gdxsv_version_deprecated,omitempty"`
	BattleCode             string           `protobuf:"bytes,3,opt,name=battle_code,json=battleCode,proto3" json:"battle_code,omitempty"`
	LogFileVersion         int32            `protobuf:"varint,4,opt,name=log_file_version,json=logFileVersion,proto3" json:"log_file_version,omitempty"`
	Patches                []*GamePatch     `protobuf:"bytes,7,rep,name=patches,proto3" json:"patches,omitempty"`
	RuleBin                []byte           `protobuf:"bytes,10,opt,name=rule_bin,json=ruleBin,proto3" json:"rule_bin,omitempty"`
	Users                  []*BattleLogUser `protobuf:"bytes,11,rep,name=users,proto3" json:"users,omitempty"`
	BattleData             []*BattleMessage `protobuf:"bytes,12,rep,name=battle_data,json=battleData,proto3" json:"battle_data,omitempty"`
	Inputs                 []uint64         `protobuf:"fixed64,15,rep,packed,name=inputs,proto3" json:"inputs,omitempty"`
	StartAt                int64            `protobuf:"varint,20,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt                  int64            `protobuf:"varint,21,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *BattleLogFile) Reset() {
	*x = BattleLogFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleLogFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleLogFile) ProtoMessage() {}

func (x *BattleLogFile) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleLogFile.ProtoReflect.Descriptor instead.
func (*BattleLogFile) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{7}
}

func (x *BattleLogFile) GetGameDisk() string {
	if x != nil {
		return x.GameDisk
	}
	return ""
}

func (x *BattleLogFile) GetGdxsvVersionDeprecated() string {
	if x != nil {
		return x.GdxsvVersionDeprecated
	}
	return ""
}

func (x *BattleLogFile) GetBattleCode() string {
	if x != nil {
		return x.BattleCode
	}
	return ""
}

func (x *BattleLogFile) GetLogFileVersion() int32 {
	if x != nil {
		return x.LogFileVersion
	}
	return 0
}

func (x *BattleLogFile) GetPatches() []*GamePatch {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *BattleLogFile) GetRuleBin() []byte {
	if x != nil {
		return x.RuleBin
	}
	return nil
}

func (x *BattleLogFile) GetUsers() []*BattleLogUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BattleLogFile) GetBattleData() []*BattleMessage {
	if x != nil {
		return x.BattleData
	}
	return nil
}

func (x *BattleLogFile) GetInputs() []uint64 {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BattleLogFile) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *BattleLogFile) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

type BattleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Seq    uint32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Body   []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *BattleMessage) Reset() {
	*x = BattleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleMessage) ProtoMessage() {}

func (x *BattleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleMessage.ProtoReflect.Descriptor instead.
func (*BattleMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{8}
}

func (x *BattleMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BattleMessage) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *BattleMessage) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{9}
}

func (x *PingMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PongMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PublicAddr string `protobuf:"bytes,3,opt,name=public_addr,json=publicAddr,proto3" json:"public_addr,omitempty"`
}

func (x *PongMessage) Reset() {
	*x = PongMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PongMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongMessage) ProtoMessage() {}

func (x *PongMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongMessage.ProtoReflect.Descriptor instead.
func (*PongMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{10}
}

func (x *PongMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PongMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PongMessage) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

type HelloServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionIdDeprecated string `protobuf:"bytes,1,opt,name=session_id_deprecated,json=sessionIdDeprecated,proto3" json:"session_id_deprecated,omitempty"`
	Ok                  bool   `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	UserId              string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *HelloServerMessage) Reset() {
	*x = HelloServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloServerMessage) ProtoMessage() {}

func (x *HelloServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloServerMessage.ProtoReflect.Descriptor instead.
func (*HelloServerMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{11}
}

func (x *HelloServerMessage) GetSessionIdDeprecated() string {
	if x != nil {
		return x.SessionIdDeprecated
	}
	return ""
}

func (x *HelloServerMessage) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *HelloServerMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FinMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail string `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *FinMessage) Reset() {
	*x = FinMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinMessage) ProtoMessage() {}

func (x *FinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinMessage.ProtoReflect.Descriptor instead.
func (*FinMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{12}
}

func (x *FinMessage) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type HelloLbsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *HelloLbsMessage) Reset() {
	*x = HelloLbsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloLbsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloLbsMessage) ProtoMessage() {}

func (x *HelloLbsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloLbsMessage.ProtoReflect.Descriptor instead.
func (*HelloLbsMessage) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{13}
}

func (x *HelloLbsMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            MessageType         `protobuf:"varint,1,opt,name=type,proto3,enum=proto.MessageType" json:"type,omitempty"`
	Seq             uint32              `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Ack             uint32              `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	SessionId       string              `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	HelloServerData *HelloServerMessage `protobuf:"bytes,10,opt,name=hello_server_data,json=helloServerData,proto3" json:"hello_server_data,omitempty"`
	PingData        *PingMessage        `protobuf:"bytes,11,opt,name=ping_data,json=pingData,proto3" json:"ping_data,omitempty"`
	PongData        *PongMessage        `protobuf:"bytes,12,opt,name=pong_data,json=pongData,proto3" json:"pong_data,omitempty"`
	BattleData      []*BattleMessage    `protobuf:"bytes,13,rep,name=battle_data,json=battleData,proto3" json:"battle_data,omitempty"`
	FinData         *FinMessage         `protobuf:"bytes,14,opt,name=fin_data,json=finData,proto3" json:"fin_data,omitempty"`
	HelloLbsData    *HelloLbsMessage    `protobuf:"bytes,15,opt,name=hello_lbs_data,json=helloLbsData,proto3" json:"hello_lbs_data,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_gdxsv_proto_gdxsv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_gdxsv_proto_gdxsv_proto_rawDescGZIP(), []int{14}
}

func (x *Packet) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_None
}

func (x *Packet) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Packet) GetAck() uint32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *Packet) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Packet) GetHelloServerData() *HelloServerMessage {
	if x != nil {
		return x.HelloServerData
	}
	return nil
}

func (x *Packet) GetPingData() *PingMessage {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *Packet) GetPongData() *PongMessage {
	if x != nil {
		return x.PongData
	}
	return nil
}

func (x *Packet) GetBattleData() []*BattleMessage {
	if x != nil {
		return x.BattleData
	}
	return nil
}

func (x *Packet) GetFinData() *FinMessage {
	if x != nil {
		return x.FinData
	}
	return nil
}

func (x *Packet) GetHelloLbsData() *HelloLbsMessage {
	if x != nil {
		return x.HelloLbsData
	}
	return nil
}

var File_gdxsv_proto_gdxsv_proto protoreflect.FileDescriptor

var file_gdxsv_proto_gdxsv_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x64, 0x78, 0x73, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x64,
	0x78, 0x73, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe7, 0x01, 0x0a, 0x11, 0x50, 0x32, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x0b, 0x50,
	0x32, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x61, 0x78,
	0x4d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x79, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0d, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x6a, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x6a, 0x69, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0d, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x64, 0x78, 0x73,
	0x76, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x64, 0x78, 0x73,
	0x76, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x06, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x22, 0x4e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x44, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0b, 0x50, 0x6f, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x22, 0x71,
	0x0a, 0x12, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2a, 0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x4c, 0x62, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x66, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x6c, 0x62, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x4c, 0x62, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4c, 0x62,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x5f, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x69, 0x6e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x4c, 0x62, 0x73, 0x10, 0x0a, 0x42, 0x0d, 0x5a, 0x0b, 0x67, 0x64, 0x78, 0x73, 0x76, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gdxsv_proto_gdxsv_proto_rawDescOnce sync.Once
	file_gdxsv_proto_gdxsv_proto_rawDescData = file_gdxsv_proto_gdxsv_proto_rawDesc
)

func file_gdxsv_proto_gdxsv_proto_rawDescGZIP() []byte {
	file_gdxsv_proto_gdxsv_proto_rawDescOnce.Do(func() {
		file_gdxsv_proto_gdxsv_proto_rawDescData = protoimpl.X.CompressGZIP(file_gdxsv_proto_gdxsv_proto_rawDescData)
	})
	return file_gdxsv_proto_gdxsv_proto_rawDescData
}

var file_gdxsv_proto_gdxsv_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gdxsv_proto_gdxsv_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_gdxsv_proto_gdxsv_proto_goTypes = []interface{}{
	(MessageType)(0),           // 0: proto.MessageType
	(*P2PMatchingReport)(nil),  // 1: proto.P2PMatchingReport
	(*P2PMatching)(nil),        // 2: proto.P2PMatching
	(*PlayerAddress)(nil),      // 3: proto.PlayerAddress
	(*GamePatch)(nil),          // 4: proto.GamePatch
	(*GamePatchCode)(nil),      // 5: proto.GamePatchCode
	(*GamePatchList)(nil),      // 6: proto.GamePatchList
	(*BattleLogUser)(nil),      // 7: proto.BattleLogUser
	(*BattleLogFile)(nil),      // 8: proto.BattleLogFile
	(*BattleMessage)(nil),      // 9: proto.BattleMessage
	(*PingMessage)(nil),        // 10: proto.PingMessage
	(*PongMessage)(nil),        // 11: proto.PongMessage
	(*HelloServerMessage)(nil), // 12: proto.HelloServerMessage
	(*FinMessage)(nil),         // 13: proto.FinMessage
	(*HelloLbsMessage)(nil),    // 14: proto.HelloLbsMessage
	(*Packet)(nil),             // 15: proto.Packet
}
var file_gdxsv_proto_gdxsv_proto_depIdxs = []int32{
	7,  // 0: proto.P2PMatching.users:type_name -> proto.BattleLogUser
	3,  // 1: proto.P2PMatching.candidates:type_name -> proto.PlayerAddress
	5,  // 2: proto.GamePatch.codes:type_name -> proto.GamePatchCode
	4,  // 3: proto.GamePatchList.patches:type_name -> proto.GamePatch
	4,  // 4: proto.BattleLogFile.patches:type_name -> proto.GamePatch
	7,  // 5: proto.BattleLogFile.users:type_name -> proto.BattleLogUser
	9,  // 6: proto.BattleLogFile.battle_data:type_name -> proto.BattleMessage
	0,  // 7: proto.Packet.type:type_name -> proto.MessageType
	12, // 8: proto.Packet.hello_server_data:type_name -> proto.HelloServerMessage
	10, // 9: proto.Packet.ping_data:type_name -> proto.PingMessage
	11, // 10: proto.Packet.pong_data:type_name -> proto.PongMessage
	9,  // 11: proto.Packet.battle_data:type_name -> proto.BattleMessage
	13, // 12: proto.Packet.fin_data:type_name -> proto.FinMessage
	14, // 13: proto.Packet.hello_lbs_data:type_name -> proto.HelloLbsMessage
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_gdxsv_proto_gdxsv_proto_init() }
func file_gdxsv_proto_gdxsv_proto_init() {
	if File_gdxsv_proto_gdxsv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gdxsv_proto_gdxsv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PMatchingReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PMatching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePatchCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleLogUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleLogFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PongMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloLbsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gdxsv_proto_gdxsv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gdxsv_proto_gdxsv_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gdxsv_proto_gdxsv_proto_goTypes,
		DependencyIndexes: file_gdxsv_proto_gdxsv_proto_depIdxs,
		EnumInfos:         file_gdxsv_proto_gdxsv_proto_enumTypes,
		MessageInfos:      file_gdxsv_proto_gdxsv_proto_msgTypes,
	}.Build()
	File_gdxsv_proto_gdxsv_proto = out.File
	file_gdxsv_proto_gdxsv_proto_rawDesc = nil
	file_gdxsv_proto_gdxsv_proto_goTypes = nil
	file_gdxsv_proto_gdxsv_proto_depIdxs = nil
}
